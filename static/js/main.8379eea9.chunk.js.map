{"version":3,"sources":["TileTypes.ts","Player.ts","GameController.ts","Tile.tsx","TileGrid.tsx","Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TileTypes","Player","x","y","convertTileNumberToClass","tileNumber","playerTileNumber","wall","consumable","portal","GameController","data","cols","rows","callback","playerData","tileGridData","editIndex","xsize","ysize","OnUpdateData","this","game","document","addEventListener","event","keyCode","movePlayer","number","console","log","setTileDataByIndex","index","setTileData","newX","newY","numColumns","numRows","newIndex","convertXYtoIndex","moveThere","moveable","moveFood","enterHouse","empty","setPlayerPos","currentX","currentY","eatFood","Math","floor","updateTile","Tile","classes","props","collisionType","key","className","React","Component","TileGrid","tileElements","numTiles","xSize","ySize","tile","push","render","setState","Game","defaultGrid","state","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8379eea9.chunk.js","sourcesContent":["//todo tiletype \r\nexport enum TileTypes {    \r\n    empty = 0,      \r\n    wall = 2,\r\n    moveable =3, \r\n    portal = 4,     \r\n    consumable = 5,\r\n    playerTileNumber = 9,\r\n}\r\n\r\nexport function convertTileNumberToClass(tileNumber:number) {\r\n    switch (tileNumber) {\r\n        case TileTypes.playerTileNumber:\r\n            return \"player\"\r\n         \r\n        case TileTypes.wall:\r\n            return \"wall\"\r\n          \r\n        case TileTypes.consumable:\r\n            return \"food\"\r\n    \r\n        case TileTypes.portal:\r\n            return \"house\"\r\n     \r\n        default:\r\n            return \"empty\"\r\n    }\r\n}","export class Player\r\n{\r\n    public x:number = 0;\r\n    public y:number = 0;\r\n}","import { Player } from \"./Player\";\r\n\r\nimport { convertTileNumberToClass, TileTypes } from \"./TileTypes\";\r\n\r\nexport class GameController {\r\n\r\n    playerData: Player;\r\n\r\n    tileGridData: number[] = [];\r\n    editIndex: number = 0;\r\n    xsize:number;\r\n    ysize:number;\r\n    public get numColumns() { return this.xsize; };\r\n    public get numRows() { return this.ysize; };\r\n    public OnUpdateData: {(data: number[]): void;};\r\n\r\n    constructor(data: number[],cols:number, rows:number, callback: {(data: number[]): void;}) {\r\n        this.xsize = cols;\r\n        this.ysize = rows;\r\n        this.tileGridData = data;\r\n        this.OnUpdateData = callback;\r\n        this.playerData = new Player();\r\n        this.playerData.x = 3;\r\n        this.playerData.y = 3;\r\n\r\n        let game = this;\r\n\r\n        document.addEventListener('keydown', function (event) {\r\n            if (event.keyCode === 37) {\r\n                game.movePlayer(-1, 0);\r\n            }\r\n            else if (event.keyCode === 39) {\r\n                game.movePlayer(1, 0);\r\n            }\r\n            else if (event.keyCode === 38) {\r\n                game.movePlayer(0, -1);\r\n            }\r\n            else if (event.keyCode === 40) {\r\n                game.movePlayer(0, 1);\r\n            }\r\n            else if (event.keyCode >= 48 && event.keyCode <= 57) {\r\n                var number = event.keyCode - 48;\r\n                console.log(\"number \" + number + \" pressed, setting index \" + game.editIndex);\r\n                game.setTileDataByIndex(game.editIndex, number);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    updateTile(index:number, tileNumber:number)\r\n    {\r\n        this.OnUpdateData(this.tileGridData);\r\n        //this.tileGrid.setTileDataByIndex(index, tileNumber);\r\n    }\r\n\r\n    setPlayerPos(x: number, y: number) {\r\n        this.playerData.x = x;\r\n        this.playerData.y = y;\r\n        this.setTileData(x, y, TileTypes.playerTileNumber);\r\n        console.log(\"Player set to: \" + x + \":\" + y);\r\n    }\r\n    movePlayer(x: number, y: number) {\r\n\r\n        //whats the new pos?\r\n        var newX = this.playerData.x + x;\r\n        var newY = this.playerData.y + y;\r\n        //can we move there?\r\n        //stop at edges\r\n        if (newX >= this.numColumns || newX < 0 ||\r\n            newY >= this.numRows || newY < 0) {\r\n            //cant move\r\n            return;\r\n        }\r\n\r\n        var newIndex = this.convertXYtoIndex(newX, newY);\r\n        var tileNumber = this.tileGridData[newIndex];\r\n        var moveThere = true;\r\n        //collision logic!\r\n        switch (tileNumber) {\r\n            case TileTypes.moveable:\r\n                moveThere = this.moveFood(newX, newY, newX + x, newY + y);\r\n                break;\r\n            case TileTypes.portal:\r\n                this.enterHouse();\r\n                moveThere = false;\r\n                break;\r\n            case TileTypes.wall:\r\n                moveThere = false;\r\n                break;\r\n\r\n        }\r\n\r\n        if (moveThere) {\r\n            //move there :)\r\n            //set old tile to empty\r\n            this.setTileData(this.playerData.x, this.playerData.y, TileTypes.empty);\r\n            //move to new tile\r\n            this.setPlayerPos(newX, newY);\r\n        }\r\n    }\r\n\r\n\r\n    //move food return true if the player can enter the space\r\n    moveFood(currentX: number, currentY: number, newX: number, newY: number) {\r\n\r\n        //can we move there?\r\n        //stop at edges\r\n        if (newX >= this.numColumns || newX < 0 ||\r\n            newY >= this.numRows || newY < 0) {\r\n            //cant move food or player\r\n            return false;\r\n        }\r\n\r\n        var newIndex = this.convertXYtoIndex(newX, newY);\r\n        var tileNumber = this.tileGridData[newIndex];\r\n        var moveThere = false;\r\n        //collision logic!\r\n        switch (tileNumber) {\r\n            case TileTypes.empty:\r\n\r\n                moveThere = true;\r\n                break;\r\n            case TileTypes.portal:\r\n                //food is eaten at house\r\n                this.eatFood();\r\n                //we dont what to move the food there\r\n                //but we want to let the player move\r\n                return true;\r\n                break;\r\n            //food cant move food or be moved into a wall\r\n        }\r\n\r\n        if (moveThere) {\r\n            //move there :)\r\n            //set old tile to empty\r\n            this.setTileData(currentX, currentY, TileTypes.empty);\r\n            //move food to new tile\r\n            this.setTileData(newX, newY, TileTypes.consumable);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    eatFood() {\r\n    }\r\n\r\n    enterHouse() {\r\n    }\r\n    convertXYtoIndex(x: number, y: number) {\r\n        var index = (y * this.numColumns) + x;\r\n        return index;\r\n    }\r\n    convertIndexToXY(index: number) {\r\n        var x = (index % this.numColumns);\r\n        var y = Math.floor(index / this.numColumns);\r\n        return { x: x, y: y };\r\n    }\r\n    setTileData(x: number, y: number, tileNumber: TileTypes) {\r\n        var index = this.convertXYtoIndex(x, y);\r\n        this.setTileDataByIndex(index, tileNumber);\r\n    }\r\n    setTileDataByIndex(index: number, tileNumber: number) {\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        this.tileGridData[index] = tileNumber;\r\n             \r\n        this.updateTile(index, tileNumber);\r\n    }\r\n\r\n    getTileData(index: number) {\r\n        var tileNumber = this.tileGridData[index];\r\n        //player 1, wall 2, 0 empty\r\n        return convertTileNumberToClass(tileNumber);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Tile.css';\r\nimport { convertTileNumberToClass, TileTypes } from './TileTypes';\r\n\r\n\r\nexport interface TileProps {    \r\n    index: number;\r\n    collisionType:number;\r\n}\r\n\r\nclass Tile extends React.Component<TileProps> {\r\n  \r\n    render() {\r\n   \r\n      const classes = `tile ${convertTileNumberToClass(this.props.collisionType)}`\r\n       return <img key={this.props.index} className={classes}></img>;\r\n    }\r\n\r\n\r\n  }\r\n  \r\n\r\nexport default Tile;\r\n","import React from 'react';\r\nimport Tile from './Tile';\r\nimport './TileGrid.css';\r\nimport { convertTileNumberToClass, TileTypes } from './TileTypes';\r\n\r\nexport interface TileGridProps {\r\n    \r\n    xSize: number;\r\n    ySize: number;\r\n    data: number[];\r\n    \r\n}\r\n\r\nclass TileGrid extends React.Component<TileGridProps> {\r\n    tileElements: Tile[] = [];\r\n    \r\n    render() {\r\n      var numTiles = this.props.xSize * this.props.ySize;\r\n      var rows = [];\r\n      for(var index = 0; index < numTiles;index++){\r\n          \r\n         \r\n          let tile:Tile = new Tile(\r\n            {            \r\n            index: index,\r\n             collisionType:this.props.data[index]}\r\n             );\r\n             \r\n             \r\n          this.tileElements.push(tile);\r\n\r\n          rows.push(tile.render());\r\n      }\r\n     // this.tileElements = rows;\r\n      return <div className=\"TileGrid\">{rows}</div>;\r\n    }\r\n\r\n    setTileDataByIndex(index: number, tileNumber: number) {\r\n      if (index === -1) {\r\n          return;\r\n      }\r\n     \r\n      //clear tile classes\r\n      var tile = this.tileElements[index];\r\n      tile.setState({collisionType:tileNumber})\r\n    }\r\n\r\n\r\n  }\r\n  \r\n\r\nexport default TileGrid;\r\n","import React from \"react\";\r\n\r\nimport { GameController } from \"./GameController\";\r\nimport TileGrid from \"./TileGrid\";\r\n\r\ntype GameProps = {  };\r\ntype GameState = { data: number[] };\r\n\r\nexport class Game extends React.Component<GameProps, GameState> {\r\n \r\n    constructor(props:any)\r\n    {\r\n        super(props);\r\n        var defaultGrid:number[] = [  \r\n            2, 2, 2, 0, 0,\r\n            2, 9, 0, 0, 0,\r\n            0, 0, 3, 3, 0,\r\n            0, 2, 0, 3, 0,\r\n            0, 4, 0, 0, 0,];\r\n\r\n            this.state = {data: defaultGrid};\r\n\r\n\r\n            let gameData = new GameController(defaultGrid, 5,5, (x)=> this.setState({data: x}));        \r\n    }\r\n    render()\r\n    {\r\n        return (    \r\n            \r\n            <TileGrid xSize={5} ySize={5} data={this.state.data} />        \r\n          );\r\n    }\r\n    \r\n}","import React from 'react';\nimport './App.css';\nimport { Game } from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <header className=\"App-header\">\n    \n    <Game />\n    </header>    \n  </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}